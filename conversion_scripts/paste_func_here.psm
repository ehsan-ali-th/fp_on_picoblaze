;-----------------------------------------------------------------------------------
; Software Implementation of Floating-Point Arithmetic, Double-Precision (64 bit).
;
;	beta(radix) = 2, k(width) = 64, p(precision) = 53, e_max = 1023
;
;------------------------------------------------------------------------------------
; Procedure:			arith_div_x_y()
;
; Registers Used:	Bank0 : All
;					Bank1 : None		
;		
; Arguments:			Bank0 : 
;					Bank1 : None
;					SPM   : x = [x_7, x_6, ..., x_0]
;			      			y = [y_7, y_6, ..., y_0]						
;
; Calls:				set_ops_status
;					decompose_x
;					decompose_y
;					
;
; RETs:				None
; 
; RET Flags:			None
;
; Description:		Divides two 64-bit double-precision floating point numbers.
;------------------------------------------------------------------------------------
arith_div_x_y:
	CALL 	set_ops_status
	CALL 	decompose_x
	CALL 	decompose_y
	CALL 	div_special_cases
	COMP	sF, 0xFF
	JUMP	Z, done_dividing
	CALL 	mul_normalize_mx
	CALL 	mul_normalize_my
	; op1 and op2 both are normal	
	CALL 	div_mx_my		; result is in [Umr_6, Lmr_6]
	CALL	sub_Ex_Ey		; exponent of result in [s1, s0]
	JUMP	NC, no_sub_ex_ey_overflow
	LOAD	sC, 0x01			; Set flag
no_sub_ex_ey_overflow:
	LOAD	sC, 0x00
	; Save the er
	WRMEM	s0, r_ex6
	WRMEM	s1, r_ex7
	; Check the result exponent
	;---------------------------------------------------------------
	; if er < 0 and er > -53 then result is subnormal, shift significand by er and set the er to zero
	; if er < 0 and er <= -53 then the result is zero (underflow).
	; if er = 0 then the result is subnormal but no shift is needed.	
	; if er > 0 then the result is normal.
	; if er > 0x7FE then the result is infinity.
	; -53 = 0xFFDD = - 0x0023
	; Read the mr [Umr_6 downto Lmr_6] (64-bits) 
div_result_not_inf:
	RDMEM	s7, Umr_6
	RDMEM	s6, Umr_5
	RDMEM	s5, Umr_4
	RDMEM	s4, Umr_3
	RDMEM	s3, Umr_2
	RDMEM	s2, Umr_1
	RDMEM	s1, Umr_0
	RDMEM	s0, Lmr_6		
	; Set the sticky bit
	LOAD	sE, 0x06			; Counter
	LOAD	sF, s0			; Copy s0
div_set_sticky_bit_loop:	
	SR0		sF
	JUMP	NC,	dont_turn_sticky_bit_on
	OR		s0, 0x20			; Turn sticky bit on
dont_turn_sticky_bit_on:	
	SUB		sE, 0x01
	JUMP	NZ, div_set_sticky_bit_loop
	RDMEM	sB, r_ex7
	RDMEM	sA, r_ex6
	TEST	sB, 0x80
	JUMP	Z,	div_check_overflow		; Normal case, so skip all subnormal tests, and check compose result if there is no overflow
	; Here we are sure that the er is negative 	
	XOR		sB, 0xFF		; Find the twos's complement of er
	XOR		sA, 0xFF
	ADD		sA, 0x01
	ADDC	sB, 0x00
	COMP 	sA, 0x34
	COMPC	sB, 0x00
	JUMP	Z, div_result_is_zero	; er = -53, underflow
	JUMP 	C, div_er_greater_than_53	; er > -53, subnormal
	JUMP	div_result_is_zero		; er < -53. underflow
div_er_greater_than_53:	
div_keep_shifting_mr_to_right:
	SR0		s7
	RORC	s6
	RORC	s5	
	RORC	s4	
	RORC	s3	
	RORC	s2	
	RORC	s1
	RORC	s0
	SUB		sA, 0x01
	SUBC	sB, 0x00
	JUMP	NZ, div_keep_shifting_mr_to_right
	; Here [sB, sA] must be zero
	; Save the er
	WRMEM	sA, r_ex6
	WRMEM	sB, r_ex7
	JUMP	div_dont_shift_mr_left_subnormal
 div_check_overflow:	
	; exponent is in [sB, sA], check if result exp. > 0x7FF? 
	COMP 	sA, 0xFF
	COMPC	sB, 0x07
	JUMP	Z, div_compose_result
	JUMP	C, div_compose_result	 	
	; Overflow
	JUMP 	return_inf
div_compose_result:	
	; Significance now is in [s7, s0] with these structure:
	;		s6       _ s5,...,s1 _ 
	;		hsss_ssss_  ss...ss  _ ssss_sggg
	; h means hidden bit, s means significance, g means three guard bits
	; Check Bit 53, if it is 0 we have to shift left by 1 otherwise don't do anything
	TEST	s7, 0x80
	JUMP	NZ, div_dont_shift_mr_left
	SL0		s0
	ROLC	s1
	ROLC	s2
	ROLC	s3
	ROLC	s4
	ROLC	s5
	ROLC	s6
	ROLC	s7
	; Load the er
	RDMEM	sE, r_ex6
	RDMEM	sF, r_ex7
	SUB		sE, 0x01
	SUBC	sF, 0x00
	; Save the er
	WRMEM	sE, r_ex6
	WRMEM	sF, r_ex7
	JUMP	div_dont_shift_mr_left
div_dont_shift_mr_left_subnormal:	
	SR0		s7
	RORC	s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0
div_dont_shift_mr_left:
	; now the significance is [s7 downto s1] with following pattern:
	; s7		s6,...,s2 s1
	; xsss ssss
	; shift to right by 3 
	SR0		s7
	RORC	s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0
	SR0		s7
	RORC	s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0	
	SR0		s7
	RORC	s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0
	TEST	sC, 0x01
	JUMP 	NZ, div_no_exp_overflow_detected
	SR0		s7
	RORC	s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0
div_no_exp_overflow_detected:	
	; Now significance is in [s7, s1]
	AND		s7, 0x0F	
	; Round	the significance s1 lowest byte, s0 has guard bits.
	CALL	div_round
	; Propogate the carry produced by possible rounding
	ADDC	s2, 0x00
	ADDC	s3, 0x00
	ADDC	s4, 0x00
	ADDC	s5, 0x00
	ADDC	s6, 0x00	
	ADDC	s7, 0x00	
	; Load the er
	RDMEM	sE, r_ex6
	RDMEM	sF, r_ex7
	; Compose the result
	; Combine exponent [sF, sE] and significand [s6, ..., s0]
	; Shift exponent to left by 4
	SL0		sE
	ROLC	sF
	SL0		sE
	ROLC	sF
	SL0		sE
	ROLC	sF
	SL0		sE
	ROLC	sF
	; Combine the exponent with significand
	OR		sE, s7
	; Calculate the sign
	RDMEM	sB,	x_sign
	RDMEM	sA,	y_sign
	XOR		sB, sA			; Calculate the sign
	AND		sB, 0x80	
	OR		sF, sB			; Apply the sign
	; Save the result in SMP
	WRMEM 	s1, r_0
	WRMEM 	s2, r_1
	WRMEM 	s3, r_2
	WRMEM 	s4, r_3
	WRMEM 	s5, r_4
	WRMEM 	s6, r_5
	WRMEM 	sE, r_6 
	WRMEM 	sF, r_7	
	jump	done_dividing	
div_result_is_zero:
	CALL	return_zero_mul	
done_dividing:	
	RET
    
;------------------------------------------------------------------------------------
; Procedure:			div_special_cases()
;
; Registers Used:	Bank0 : s1, s2
;					Bank1 : None		
;		
; Arguments:			Bank0 : None
;					Bank1 : None
;			      			
;
; Calls:				
;
; RETs:				Bank1: [s1. s0]
; 
; RET Flags:			None
;
; Description:		Takes care of special operands in division.
;					Return 0xFF in sF if one of the operands is special.
;					If sF is 0xFF then the result is already in [r_7, r_8] in SPM.
;------------------------------------------------------------------------------------	
div_special_cases:
	RDMEM 	s1, op1_status	; read the ops status
	RDMEM 	s2, op2_status	; read the ops status
	; We check op1 for 
	; 1) NaN
	;		Yes:	return X_NaN	
	;		No:		Go to step 2.
	; 2) Infinity
	;		Yes:	Check op2, if +0 and NaN then return_NaN_Inf
	;		No:		return +infinity
	; 3) Zero
	;		Yes:	check if op2 is +inf or NaN then return_NaN_Inf
	;				 else return 0
	;		No:		check op2
	;-----------------------------------------------
	; Check if op1 is NaN
	TEST	s1, 0x10
	JUMP	Z, div_final_op1_not_NaN		; No
div_final_op1_NaN:						; Yes
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP 	NZ, return_xy_NAN	; Yes
	JUMP	return_x_NAN
div_final_op1_not_NaN:
	; Check if op1 is Inf
	TEST	s1, 0x20
	JUMP	Z, div_final_op1_not_Inf		; No
div_final_op1_Inf:						; Yes
	; Check if op2 is zero
	TEST	s2, 0x40
	JUMP	NZ, return_pos_inf			; Yes
	; Check if op2 is Inf
	TEST	s2, 0x20
	JUMP	NZ, div_return_NAN				; Yes
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, return_y_NAN				; Yes
	JUMP	return_x_Inf		
div_final_op1_not_Inf:	
	; Check if op1 is zero
	TEST	s1, 0x40
	JUMP	Z, div_check_final_op2		; No
div_final_op1_is_zero:
	; Check if op2 is zero
	TEST	s2, 0x40
	JUMP	NZ, return_div_NAN				; Yes
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, return_y_NAN_positive		;Yes
	JUMP	return_zero_mul
div_check_final_op2:				; Here we are sure op1 is (sub)normal
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, div_return_y_NAN_positive		;Yes
	JUMP	div_final_op2_not_NaN	
div_return_y_NAN_positive:
	; make y positive
	LOAD 	sE, 0x7F
	RDMEM	sD, y_7
	AND		sD, sE
	WRMEM	sD, y_7	
	JUMP	return_y_NAN
div_final_op2_not_NaN:					; No
	; Check if op2 is Infinity
	TEST	s2, 0x20
	JUMP	NZ, return_zero_mul			; Yes
	; Check if op2 is zero
	TEST	s2, 0x40
	JUMP	NZ, return_x_Inf				; Yes
	; Both operators are (sub)normal. Perform the multiplication.
	LOAD	sF, 0x00
	RET	
    
;------------------------------------------------------------------------------------
; Procedure:			div_mx_my()
;
; Registers Used:	Bank0 : All
;					Bank1 : None		
;		
; Arguments:			Bank0 : None
;					Bank1 : None
;					SPM   : x_m6, x_m5, ... x_m0 (7-bytes)
;							y_m6, y_m5, ... y_m0	 (7-bytes)
;			      			
;
; Calls:				
;
; RETs:				Bank0: [s6 doento s0] is reminder
;					Bank1: [s6 downto s0] is Quotient
; 
; RET Flags:			None
;
; Description:		Divides two 53-bit double-precision floating point numbers.
;------------------------------------------------------------------------------------
div_mx_my:
	; Set quotient [s7, s0] to 0
	REGBANK B
	LOAD	s0, 0x00
	LOAD	s1, 0x00
	LOAD	s2, 0x00
	LOAD	s3, 0x00
	LOAD	s4, 0x00
	LOAD	s5, 0x00
	LOAD	s6, 0x00
	LOAD	s7, 0x00
	REGBANK A
	; Load mx: dividend
	LOAD	s7, 0x00
	RDMEM 	s6, x_m6
	RDMEM	s5, x_m5
	RDMEM 	s4, x_m4
	RDMEM 	s3, x_m3
	RDMEM 	s2, x_m2
	RDMEM 	s1, x_m1
	RDMEM 	s0, x_m0
	; Load my: divisor
	LOAD	sF, 0x00
	RDMEM 	sE, y_m6
	RDMEM	sD, y_m5
	RDMEM 	sC, y_m4
	RDMEM 	sB, y_m3
	RDMEM 	sA, y_m2
	RDMEM 	s9, y_m1
	RDMEM 	s8, y_m0
	REGBANK B
	LOAD	sF, 0x40			; This is the counter, we need to loop 64 times
	REGBANK A
compare_dividend:
	; Is dividend >= divisor ?
	COMP	s0, s8
	COMPC	s1, s9
	COMPC	s2, sA
	COMPC	s3, sB
	COMPC	s4, sC
	COMPC	s5, sD
	COMPC	s6, sE
	COMPC	s7, sF
	JUMP	C, dividend_is_less
	; dividend is greateror than divisor
	; mx - my
	SUB		s0, s8
	SUBC	s1, s9
	SUBC	s2, sA
	SUBC	s3, sB
	SUBC	s4, sC
	SUBC	s5, sD
	SUBC	s6, sE
	SUBC	s7, sF
	; Append 1 to quotient
	REGBANK	B
	SL1		s0
	ROLC	s1
	ROLC	s2	 
	ROLC	s3	 
	ROLC	s4	 
	ROLC	s5	 
	ROLC	s6	 
	ROLC	s7	 
	REGBANK A
	JUMP	shift_dividend_left
dividend_is_less:	
	; Append 0 to quotient
	REGBANK	B
	SL0		s0
	ROLC	s1	 
	ROLC	s2	 
	ROLC	s3	 
	ROLC	s4	 
	ROLC	s5	 
	ROLC	s6	
	ROLC	s7	 
	REGBANK A
shift_dividend_left:		
	; Shift mx (dividend) to left by 1
	SL0		s0
	ROLC	s1
	ROLC	s2
	ROLC	s3
	ROLC	s4
	ROLC	s5
	ROLC	s6
	ROLC	s7
	REGBANK	B
	SUB		sF, 0x01		; Decrement the counter
	REGBANK	A
	JUMP	NZ, compare_dividend
div_finished:
	REGBANK	B
	WRMEM	s7, Umr_6 
	WRMEM	s6, Umr_5 
	WRMEM	s5, Umr_4 
	WRMEM	s4, Umr_3 
	WRMEM	s3, Umr_2 
	WRMEM	s2, Umr_1 
	WRMEM	s1, Umr_0
	WRMEM	s0, Lmr_6
	REGBANK A 
	RET
    
;------------------------------------------------------------------------------------
; Procedure:			sub_Ex_Ey()
;
; Registers Used:	Bank0 : All
;					Bank1 : None		
;		
; Arguments:			Bank0 : None
;					Bank1 : None
;					SPM   : x_m6, x_m5, ... x_m0 (7-bytes)
;							y_m6, y_m5, ... y_m0	 (7-bytes)
;			      			
;
; Calls:				
;
; RETs:				Bank1: [s1. s0]
; 
; RET Flags:			None
;
; Description:		Calculates the ex + ey which is Ex + Ey - bias(1023) and returns
;						the result in [s1, s0].
;------------------------------------------------------------------------------------
sub_Ex_Ey:	
	; Read ex
	RDMEM 	s1, x_ex7
	RDMEM 	s0, x_ex6
	; if op1 is subnormal then subtract by 1022 else subtract by  1023
	RDMEM	sF, op1_status
	TEST	sF, 0x80
	JUMP	NZ,	sub_subnormal_exponent_detected
	; Subtract by 1023
	SUB		s0, 0xFF
	SUBC	s1,	0x03		
	JUMP	sub_done_exponent_subtracting
sub_subnormal_exponent_detected:			
	; Subtract by 1022
	SUB		s0, 0xFE
	SUBC	s1,	0x03		
sub_done_exponent_subtracting:	
	; Read ey
	RDMEM 	s3, y_ex7
	RDMEM 	s2, y_ex6
	; if [s1, s0] == zero then subtract 1022 else subtract 1023
	RDMEM	sF, op2_status
	TEST	sF, 0x80
	JUMP	NZ,	sub_subnormal_exponent_detected_y
	; Subtract by 1023
	SUB		s2, 0xFF
	SUBC	s3,	0x03		
	JUMP	sub_done_exponent_subtracting_y
sub_subnormal_exponent_detected_y:			
	; Subtract by 1022
	SUB		s2, 0xFE
	SUBC	s3,	0x03		
sub_done_exponent_subtracting_y:
	SUB		s0, s2
	SUBC	s1, s3
	ADD		s0, 0xFF			; subtract by 1023'd =  0x03FF
	ADDC	s1, 0x03
	RET
	
return_div_NAN:
	LOAD	sF, 0xFF
	LOAD	s7, 0x7F	       
	LOAD	s6, 0xF8	   
	LOAD 	s5, 0x00
	LOAD 	s4, 0x00
	LOAD 	s3, 0x00
	LOAD 	s2, 0x00
	LOAD 	s1, 0x00
	LOAD 	s0, 0x00
	WRMEM 	s7, r_7
	WRMEM 	s6, r_6
	WRMEM 	s5, r_5
	WRMEM 	s4, r_4
	WRMEM 	s3, r_3
	WRMEM 	s2, r_2
	WRMEM 	s1, r_1
	WRMEM 	s0, r_0
	RET	
	
	;-------------------------------------------------------------
	; s1 has the lowest byte, and s0 has the guard bits
div_round: 
	; -------------------------------------------------
	; Calculate the sticky bit
	; Check the guard bit - s0[7]
	TEST 	s0, 0x80
	JUMP 	NZ, div_guard_bit_is_1
	; Gaurd bit = 0 : Round down (Do  nothing)
	JUMP 	div_round_RET_zero
div_guard_bit_is_1:
	; Gaurd bit = 1, Check the round bit
	TEST 	s0, 0x40
	JUMP 	Z, div_round_bit_is_0	
	; Gaurd bit = 1, Round bit = 1 : Round Up (add 1 to mantissa)
	JUMP 	div_round_RET_one
div_round_bit_is_0:
	; Gaurd bit = 1, Round bit = 0 : Check the Sticky bit
	TEST 	s0, 0x20
	JUMP 	NZ, div_round_RET_one ; Gaurd bit = 1, Round bit = 0 , Sticky bit = 1 : Round Up (add 1 to mantissa)
	; Gaurd bit = 1, Round bit = 0 , Sticky bit = 0 : Round to nearest even,
	;       Means round up if bit before Guard bit is 1, else round down.
	;TEST 	s1, 0x01
	;JUMP 	Z, div_round_RET_zero
div_round_RET_one:
    ADD 		s1, 0x01
div_round_RET_zero:
    RET		
    
return_inf:
	LOAD 	sF, 0xFF			; Signal the caller that the operation is complete.
	; Calculate the sign
	RDMEM	sB,	x_sign
	RDMEM	sA,	y_sign
	XOR		sB, sA			; Calculate the sign
	AND		sB, 0x80	
	LOAD	s2,	0x7F
	OR		s2, sB			; Apply the sign
	LOAD	s1,	0xF0
	LOAD	s0, 0x00      
	WRMEM 	s2, r_7
	WRMEM 	s1, r_6
	WRMEM 	s0, r_5
	WRMEM 	s0, r_4
	WRMEM 	s0, r_3
	WRMEM 	s0, r_2
	WRMEM 	s0, r_1
	WRMEM 	s0, r_0	
	RET    

div_return_NAN:
	LOAD 	sF, 0xFF			; Signal the caller that the operation is complete.
	; Calculate the sign
	RDMEM	sB,	x_sign
	RDMEM	sA,	y_sign
	XOR		sB, sA			; Calculate the sign
	AND		sB, 0x80	
	LOAD	s2,	0x7F
	;OR		s2, sB			; Apply the sign
	LOAD	s1,	0xF8
	LOAD	s0, 0x00      
	WRMEM 	s2, r_7
	WRMEM 	s1, r_6
	WRMEM 	s0, r_5
	WRMEM 	s0, r_4
	WRMEM 	s0, r_3
	WRMEM 	s0, r_2
	WRMEM 	s0, r_1
	WRMEM 	s0, r_0	
	RET	

